
#CATEGORY "46" "SWIMMING POOL" // Custom

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE

#USER_SIMPLSHARP_LIBRARY "OspaSS"
                                         
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	connect_tp;		DIGITAL_OUTPUT	connected;
DIGITAL_INPUT	disconnect_tp;		DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	DEBUG;			DIGITAL_OUTPUT	granted;
DIGITAL_INPUT	ReadMsg_tp;		DIGITAL_OUTPUT	_SKIP_;

DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	WasserwerteGueltig;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

DIGITAL_INPUT	AttrBetrieb1_Ein;			DIGITAL_OUTPUT	AttrBetrieb1;
DIGITAL_INPUT	AttrBetrieb1_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb2_Ein;			DIGITAL_OUTPUT	AttrBetrieb2;
DIGITAL_INPUT	AttrBetrieb2_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb3_Ein;			DIGITAL_OUTPUT	AttrBetrieb3;
DIGITAL_INPUT	AttrBetrieb3_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb4_Ein;			DIGITAL_OUTPUT	AttrBetrieb4;
DIGITAL_INPUT	AttrBetrieb4_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb5_Ein;			DIGITAL_OUTPUT	AttrBetrieb5;
DIGITAL_INPUT	AttrBetrieb5_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb6_Ein;			DIGITAL_OUTPUT	AttrBetrieb6;
DIGITAL_INPUT	AttrBetrieb6_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb7_Ein;			DIGITAL_OUTPUT	AttrBetrieb7;
DIGITAL_INPUT	AttrBetrieb7_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb8_Ein;			DIGITAL_OUTPUT	AttrBetrieb8;
DIGITAL_INPUT	AttrBetrieb8_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb9_Ein;			DIGITAL_OUTPUT	AttrBetrieb9;
DIGITAL_INPUT	AttrBetrieb9_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	AttrBetrieb10_Ein;			DIGITAL_OUTPUT	AttrBetrieb10;
DIGITAL_INPUT	AttrBetrieb10_Aus;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

DIGITAL_INPUT	Uws1SbEin_tp;		DIGITAL_OUTPUT	Uws1SbEin;
DIGITAL_INPUT	Uws1SbAus_tp;		DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	Uws1WpEin_tp;		DIGITAL_OUTPUT	Uws1WpEin;
DIGITAL_INPUT	Uws1WpAus_tp;		DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	WpEin_tp;		DIGITAL_OUTPUT	WpEin;
DIGITAL_INPUT	WpAus_tp;		DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	SbEin;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	RinneEin;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	BodenreinigerEin;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	FilteranlageBetrieb;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	StoerungWasserwerte;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	Sammelstoerung;
DIGITAL_INPUT	KlimaBetrieb_tp;	DIGITAL_OUTPUT	KlimaBetrieb;
DIGITAL_INPUT	KlimaBadebetrieb_tp;	DIGITAL_OUTPUT	KlimaBadebetrieb;
DIGITAL_INPUT	KlimaFrischluftbetrieb_tp;	DIGITAL_OUTPUT	KlimaFrischluftbetrieb;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	AlarmeAnstehend;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	TempRegler1_Aktiv;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	KlimaFrischluftschaltung;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	AbschaltenWegenDurchflussmangel;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	AlarmMaxFrischwasserNachspeisung;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	AlarmLeckageErkannt;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	ErrTestAbsperrhahn1;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	ErrTestAbsperrhahn2;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	RedoxIst;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	TempIst_1_2;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	pHIst;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	ChlorIst;
ANALOG_INPUT	TempSoll_1;		ANALOG_OUTPUT	TempSollWert_1;
ANALOG_INPUT	TempSoll_2;		ANALOG_OUTPUT	TempSollWert_2;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	RaumTempIst;
ANALOG_INPUT	RaumTempSoll;		ANALOG_OUTPUT	RaumTempSollWert;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	RaumFeuchteIst;
ANALOG_INPUT	RaumFeuchteSoll;	ANALOG_OUTPUT	RaumFeuchteSollWert;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	LichtSzene;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	FilterBetriebsart;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	FilterpumpeVoruebergehendSchalten;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	RedoxSoll;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	pHSollWert;
ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	ChlorSollWert;

ANALOG_INPUT	_SKIP_;			ANALOG_OUTPUT	_SKIP_;
STRING_INPUT	_SKIP_;			STRING_OUTPUT	DEBUG$;
STRING_INPUT	_SKIP_;			STRING_OUTPUT	MSG$;

STRING_PARAMETER HostName[254];
STRING_PARAMETER Password[254];

#BEGIN_PARAMETER_PROPERTIES HostName
   propDefaultValue="";
   propShortDescription="Host name or IP address of the web interface";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Password
   propDefaultValue="";
   propShortDescription="Password to web interface";
#END_PARAMETER_PROPERTIES


Ospa Client;

Push connect_tp
{
	Client.Enable(1);
}

Push disconnect_tp
{
	Client.Enable(0);
}

Change DEBUG
{
	Client.Debug = DEBUG;
}

Push AttrBetrieb1_Ein
{
	Client.Send(12,1);
}
Push AttrBetrieb1_Aus
{
	Client.Send(12,0);
}
Push AttrBetrieb2_Ein
{
	Client.Send(13,1);
}
Push AttrBetrieb2_Aus
{
	Client.Send(13,0);
}
Push AttrBetrieb3_Ein
{
	Client.Send(14,1);
}
Push AttrBetrieb3_Aus
{
	Client.Send(14,0);
}
Push AttrBetrieb4_Ein
{
	Client.Send(15,1);
}
Push AttrBetrieb4_Aus
{
	Client.Send(15,0);
}
Push AttrBetrieb5_Ein
{
	Client.Send(16,1);
}
Push AttrBetrieb5_Aus
{
	Client.Send(16,0);
}
Push AttrBetrieb6_Ein
{
	Client.Send(17,1);
}
Push AttrBetrieb6_Aus
{
	Client.Send(17,0);
}
Push AttrBetrieb7_Ein
{
	Client.Send(18,1);
}
Push AttrBetrieb7_Aus
{
	Client.Send(18,0);
}
Push AttrBetrieb8_Ein
{
	Client.Send(19,1);
}
Push AttrBetrieb8_Aus
{
	Client.Send(19,0);
}
Push AttrBetrieb9_Ein
{
	Client.Send(20,1);
}
Push AttrBetrieb9_Aus
{
	Client.Send(20,0);
}
Push AttrBetrieb10_Ein
{
	Client.Send(21,1);
}
Push AttrBetrieb10_Aus
{
	Client.Send(21,0);
}

Push Uws1SbEin_tp
{
	Client.Send(22,1);
}
Push Uws1SbAus_tp
{
	Client.Send(22,0);
}

Push Uws1WpEin_tp
{
	Client.Send(23,1);
}
Push Uws1WpAus_tp
{
	Client.Send(23,0);
}

Push WpEin_tp
{
	Client.Send(24,1);
}
Push WpAus_tp
{
	Client.Send(24,0);
}

Callback Function MyOnConnectChange(SIGNED_LONG_INTEGER state)
{
	connected = (state!=0);
}

Callback Function MyOnGrantedChange(SIGNED_LONG_INTEGER state)
{
	granted = (state!=0);
}

Callback Function MyOnValueReported(SIGNED_LONG_INTEGER num, SIGNED_LONG_INTEGER val)
{
	switch( num )
	{
		case (1):
			TempIst_1_2 = val;
		case (2):
			RedoxIst = val;
		case (3):
			pHIst = val;
		case (4):
			ChlorIst = val;
		case (5):
			TempSollWert_1 = val;
		case (6):
			TempSollWert_2 = val;
		case (7):
			RaumTempIst = val;
		case (8):
			RaumTempSollWert = val;
		case (9):
			RaumFeuchteIst = val;
		case (10):
			RaumFeuchteSollWert = val;
		case (11):
			WasserwerteGueltig = val;
		case (12):
			AttrBetrieb1 = val;
		case (13):
			AttrBetrieb2 = val;
		case (14):
			AttrBetrieb3 = val;
		case (15):
			AttrBetrieb4 = val;
		case (16):
			AttrBetrieb5 = val;
		case (17):
			AttrBetrieb6 = val;
		case (18):
			AttrBetrieb7 = val;
		case (19):
			AttrBetrieb8 = val;
		case (20):
			AttrBetrieb9 = val;
		case (21):
			AttrBetrieb10 = val;
		case (22):
			Uws1SbEin = val;
		case (23):
			Uws1WpEin = val;
		case (24):
			WpEin = val;
		case (25):
			SbEin = val;
		case (26):
			RinneEin = val;
		case (27):
			BodenreinigerEin = val;
		case (28):
			FilteranlageBetrieb = val;
		case (29):
			StoerungWasserwerte = val;
		case (30):
			Sammelstoerung = val;
		case (31):
			LichtSzene = val;
		case (32):
			FilterBetriebsart = val;
		case (33):
			KlimaBetrieb = val;
		case (34):
			KlimaBadebetrieb = val;
		case (35):
			KlimaFrischluftbetrieb = val;
		case (36):
			AlarmeAnstehend = val;
		case (37):
			FilterpumpeVoruebergehendSchalten = val;
		case (38):
			TempRegler1_Aktiv = val;
		case (39):
			RedoxSoll = val;
		case (40):
			pHSollWert = val;
		case (41):
			ChlorSollWert = val;
		case (42):
			KlimaFrischluftschaltung = val;
		case (43):
			AbschaltenWegenDurchflussmangel = val;
		case (44):
			AlarmMaxFrischwasserNachspeisung = val;
		case (45):
			AlarmLeckageErkannt = val;
		case (46):
			ErrTestAbsperrhahn1 = val;
		case (47):
			ErrTestAbsperrhahn2 = val;
	}
}

change TempSoll_1
{
	Client.Send( 5, TempSoll_1);
}

change TempSoll_2
{
	Client.Send( 6, TempSoll_2);
}

change RaumTempSoll
{
	Client.Send( 8, RaumTempSoll);
}

change RaumFeuchteSoll
{
	Client.Send( 10, RaumFeuchteSoll);
}

push ReadMsg_tp
{
	Client.checkMessage();
}

push KlimaBetrieb_tp
{
	long_integer val;
	if( KlimaBetrieb=0 )
		val = 1;
	else
		val = 0;
	
	Client.Send( 33, val );
}

push KlimaBadebetrieb_tp
{
	long_integer val;
	if( KlimaBadebetrieb=0 )
		val = 1;
	else
		val = 0;
	
	Client.Send( 34, val );
}

push KlimaFrischluftbetrieb_tp
{
	long_integer val;
	if( KlimaFrischluftbetrieb=0 )
		val = 1;
	else
		val = 0;
	
	Client.Send( 35, val );
}

Callback Function MyOnLog(STRING s)
{
	DEBUG$ = s;
}

Callback Function MyOnOspaMsg(STRING s)
{
	MSG$ = s;
}

Function Init()
{
	RegisterDelegate(Client,OnConnectChange,MyOnConnectChange);
	RegisterDelegate(Client,OnGrantedChange,MyOnGrantedChange);
	RegisterDelegate(Client,OnValueReported,MyOnValueReported);
	RegisterDelegate(Client,OnLog,MyOnLog);
	RegisterDelegate(Client,OnOspaMsg,MyOnOspaMsg);
	Client.Initialize(HostName,Password);
}

Function Main()
{
	WaitForInitializationComplete();
	Init();
}
